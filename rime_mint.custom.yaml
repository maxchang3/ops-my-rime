patch:
  "menu/page_size": 8
  "emoji_suggestion/tips": none
  punctuator/half_shape:
      "!": {commit: "！"}
      "\"": {pair: ["“", "”"]}
      "#": "#"
      "$": "¥"
      "%": "%"
      "&": "&"
      "'": {pair: ["‘", "’"]}
      "(": "（"
      ")": "）"
      "*": "*"
      "+": "+"
      ",": {commit: "，"}
      "-": "-"
      .: {commit: "。"}
      "/": "/"
      ":": {commit: "："}
      ";": {commit: "；"}
      "<": "《"
      "=": "="
      ">": "》"
      "?": {commit: "？"}
      "@": "@"
      "[": "【"
      "\\": "、"
      "]":  "】"
      "^": {commit: "……"}
      _: "──"
      "`": "·"
      "{": "「"
      "|": "|"
      "}":  "」"
      "~": "~"
  # radical_reverse_lookup/prefix: "u"
  # radical_reverse_lookup/tips: ''
  # recognizer/patterns/radical_lookup: "u[a-z]*'?$"
  # 默认中文状态
  switches/@0/reset: 0
  # 只保留中文输入法
  switches/@0/states:  [中文]
  engine/processors:
    - lua_processor@*select_character              # 以词定字
    - lua_processor@*codeLengthLimit_processor     # 使用Lua限制输入内容的最大长度(防止过长而卡顿)
    # - ascii_composer                               # ※ 處理西文模式及中西文切換
    - recognizer                                   # ※ 與 matcher 搭配，處理符合特定規則的輸入碼，如網址、反查等
    - key_binder                                   # ※ 在特定條件下將按鍵綁定到其他按鍵，如重定義逗號、句號爲候選翻頁鍵
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  key_binder:
    bindings:
      # Emacs 风格的快捷键
      - { when: composing, accept: Control+p, send: Up }     # composing 时,Control+p 等同于 Up 键
      - { when: composing, accept: Control+n, send: Down }
      - { when: composing, accept: Control+b, send: Left }
      - { when: composing, accept: Control+f, send: Right }
      - { when: composing, accept: Control+a, send: Home }
      - { when: composing, accept: Control+e, send: End }
      - { when: composing, accept: Control+d, send: Delete }
      - { when: composing, accept: Control+k, send: Shift+Delete } # 删除到行尾
      - { when: composing, accept: Control+g, send: Escape }       # 退出编码
      - { when: composing, accept: Alt+v, send: Page_Up }          # 翻页
      - { when: composing, accept: Control+v, send: Page_Down }
      # 按词移动光标
      # - { when: composing, accept: ISO_Left_Tab, send: Shift+Left } # ISO_Left_Tab 是 Shift+Tab
      # - { when: composing, accept: Shift+Tab, send: Shift+Left }
      # - { when: composing, accept: Tab, send: Shift+Right }
      - { when: composing, accept: Tab, send: Right } # Tab 移动光标向右
      - { when: composing, accept: Shift+Tab, send: Left } # Shift+Tab 移动光标向左
      # 翻页
      - { when: paging, accept: minus, send: Page_Up }             # 编码窗口翻页
      # - { when: has_menu, accept: equal, send: Page_Down }
      # - { when: paging, accept: comma, send: Page_Up }             # 候选窗口翻页
      - { when: has_menu, accept: period, send: Page_Down }
      - { when: predicting, accept: comma, send: comma }           # 在预编码模式下,不当作快捷键
      - { when: predicting, accept: period, send: period }
      - {accept: minus, send: Page_Up, when: paging}     # 使用`-`进行向上翻页（第一页时候无效）
      - {accept: equal, send: Page_Down, when: has_menu} # 使用`=`进行向下翻页
      # 切换状态
      - { when: always, accept: Control+Shift+1, select: .next }   # 切换输入方案
      - { when: always, accept: Control+Shift+2, toggle: noop } # 切换中/西文模式
      - { when: always, accept: Control+Shift+3, toggle: noop } # 切换全角/半角
      - { when: always, accept: Control+Shift+4, toggle: simplification } # 切换简体/繁体
      - { when: always, accept: Control+Shift+5, toggle: extended_charset } # 切换扩展字符
      - { when: always, accept: Shift+space, toggle: noop } # 另一种切换全角/半角的方式
      - { when: always, accept: Control+period, toggle: noop } # 切换中/西文标点
